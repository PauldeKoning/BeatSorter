// <auto-generated />
using System;
using BeatSorter.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BeatSorter.Migrations
{
    [DbContext(typeof(BeatSorterContext))]
    [Migration("20210309143406_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BeatSorter.Data.Beatmap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BPM")
                        .HasColumnType("int");

                    b.Property<string>("BeatSaverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Hash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LevelAuthor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SongAuthor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SongSubTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SongTitle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Beatmap");
                });

            modelBuilder.Entity("BeatSorter.Data.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BeatmapId")
                        .HasColumnType("int");

                    b.Property<int>("Bombs")
                        .HasColumnType("int");

                    b.Property<double>("Duration")
                        .HasColumnType("double");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<int>("NJS")
                        .HasColumnType("int");

                    b.Property<float>("NJSOffset")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Notes")
                        .HasColumnType("int");

                    b.Property<int>("Obstacles")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("BeatmapId");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("BeatSorter.Data.Uploader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BeatSaverId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Uploader");
                });

            modelBuilder.Entity("BeatSorter.Data.UploaderBeatmap", b =>
                {
                    b.Property<int>("UploaderId")
                        .HasColumnType("int");

                    b.Property<int>("BeatmapId")
                        .HasColumnType("int");

                    b.HasKey("UploaderId", "BeatmapId");

                    b.HasIndex("BeatmapId");

                    b.ToTable("UploaderBeatmap");
                });

            modelBuilder.Entity("BeatSorter.Data.Difficulty", b =>
                {
                    b.HasOne("BeatSorter.Data.Beatmap", "Beatmap")
                        .WithMany("Difficulties")
                        .HasForeignKey("BeatmapId");
                });

            modelBuilder.Entity("BeatSorter.Data.UploaderBeatmap", b =>
                {
                    b.HasOne("BeatSorter.Data.Beatmap", "Beatmap")
                        .WithMany("UploaderBeatmaps")
                        .HasForeignKey("BeatmapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeatSorter.Data.Uploader", "Uploader")
                        .WithMany("UploaderBeatmaps")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
